#lang planet neil/sicp
(define (fast-prime? n times)
  (define (fermat-test n)
    (define (try-it a)
      (define (expmod base exp m)  
        (cond ((= exp 0) 1)  
              ((even? exp)  
               (check-nontrivial-sqrt (expmod base (/ exp 2) m) m)) ;; look here  
              (else  
               (remainder (* base (expmod base (- exp 1) m)) m))))  
      (define (check-nontrivial-sqrt n m)
        (define (square x)
          (* x x))
        (let ((x (remainder (square n) m)))  
          (if (and (not (= n 1))  
                   (not (= n (- m 1)))  
                   (= x 1))  
              0  
              x)))
      (= (expmod a (- n 1) n) 1))
    (try-it (+ 1 (random (- n 1)))))
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(fast-prime? 561 4)
(fast-prime? 1105 4)
(fast-prime? 1729 4)
(fast-prime? 2465 4)
(fast-prime? 2821 4)
(fast-prime? 6601 4)
(fast-prime? 1000033 4)
(fast-prime? 1000037 4)